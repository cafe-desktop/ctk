Notes about the inner workings of the widget system of CTK+
===========================================================

This file contains some notes as to how the widget system does
and should work. It consists of three parts:

 I) A description of the meaning of the various flags

 II) A list of invariants about the states of the widgets. 
    (Throughout this document, we refer to the states of the
     widgets by referring to the flags for CtkWidget)

 III) Some notes about the ways that a widget changes states

 IV) A list of responsibilities of various widget signals when
    the states change.

Any action necessary to maintain the invariants in II which is not
explicitly mentioned in IV), is the responsibility of the core CTK
code, which is roughly defined as:

  ctkobject.c
  ctkwidget.c
  ctkcontainer.c
  ctkmain.c
  ctksignal.c

Section II is mostly of interest to those maintaining CTK, the
other sections may also be interesting to people writing
new widgets.

Main outline:
	- Owen Taylor <owt1@cornell.edu>
	  1998/02/03

Flag descriptions:
	- Tim Janik <timj@gimp.org>
	  1998/02/04

I. Flags
--------

CtkObject:

CTK_DESTROYED:
	This flagged is set for a CtkObject right before its
	destruction code is executed. Its main use is the
	prevention of multiple destruction invocations.
	
CTK_FLOATING:
	This flag reflects the fact that the holder of the
	initial reference count is unknown. Refer to refcounting.txt
	for further details.

CTK_RESERVED_1:
CTK_RESERVED_2:
	Reserved flags.


CtkWidget, public flags:

CTK_TOPLEVEL:
	Widgets without a real parent, as there are CtkWindows and
	CtkMenus have this flag set throughout their lifetime.
	Toplevel widgets always contain their own GdkWindow.
	
CTK_NO_WINDOW:
	This flag is indicative for a widget that does not provide
	its own GdkWindow. Visible action (e.g. drawing) is performed
	on the parent's GdkWindow.

CTK_REALIZED:
	Set by ctk_widget_realize, unset by ctk_widget_unrealize.
	Relies on ((widget->parent && widget->parent->window)
	           || CTK_WIDGET_TOPLEVEL (widget));
	Means: widget has an associated GdkWindow (XWindow).

CTK_MAPPED:
	Set by ctk_widget_map, unset by ctk_widget_unmap.
	May only be set if CTK_WIDGET_REALIZED (widget).
	Means: cdk_window_show() has been called on the widgets window(s).

CTK_VISIBLE:
	Set by ctk_widget_show.
	Implies that a widget will be flagged CTK_MAPPED as soon as its
	parent is mapped.
!CTK_VISIBLE:
	Set by ctk_widget_hide.
	Implies that a widget is not onscreen, therefore !CTK_MAPPED.

CTK_CHILD_VISIBLE
        Set by ctk_widget_set_child_visible, and if FALSE indicates that 
        the widget should not be mapped even if the parent is mapped
        and visible. Containers like CtkNotebook use this flag.
        A private flag, not a public flag, so if you need to check
        this flag, you should call ctk_widget_get_child_visible().
        (Should be very rarely necessary.)

CTK_SENSITIVE:
	Set and unset by ctk_widget_set_sensitive.
	The sensitivity of a widget determines whether it will receive
	certain events (e.g. button or key presses). One premise for
	the widgets sensitivity is to have CTK_SENSITIVE set.

CTK_PARENT_SENSITIVE:
	Set and unset by ctk_widget_set_sensitive operations on the
	parents of the widget.
	This is the second premise for the widgets sensitivity. Once
	it has CTK_SENSITIVE and CTK_PARENT_SENSITIVE set, its state is
	effectively sensitive. This is expressed (and can be examined) by
	the CTK_WIDGET_IS_SENSITIVE macro.

CTK_CAN_FOCUS:
	There are no directly corresponding functions for setting/unsetting
	this flag, but it can be affected by the CtkWidget::has_focus argument
	via ctk_widget_set_arg.
	This flag determines whether a widget is able to handle focus grabs.

CTK_HAS_FOCUS:
	This flag will be set by ctk_widget_grab_focus for widgets that also
	have CTK_CAN_FOCUS set. The flag will be unset once another widget
	grabs the focus.
	
CTK_CAN_DEFAULT:
CTK_HAS_DEFAULT:
	These two flags are mostly equal in functionality to their *_FOCUS
	counterparts, but for the default widget.

CTK_HAS_GRAB:
	Set by ctk_grab_add, unset by ctk_grab_remove.
	Means: widget is in the grab_widgets stack, and will be the preferred
	one for receiving events other than ones of cosmetic value.

CTK_BASIC:
	The CTK_BASIC flag is an attempt at making a distinction
	between widgets that handle user input e.g. key/button presses
	and those that don't. Subsequent parent<->child relation ships
	of non `basic' widgets should be avoided. The checking for
	this is currently not properly enforced in the code. For
	example CtkButton is a non `basic' widget, that will therefore
	disallow to act as a container for another CtkButton. Now the
	gnit is, one can add a CtkHBox (which is a `basic' widget) to
	the first button, and put the second into the box.

CTK_RESERVED_3:

CTK_RC_STYLE:
	This flag indicates that its style has been looked up through
	the rc mechanism. It does not imply that the widget actually
	had a style defined through the rc mechanism.


CtkWidget, private flags:

CTK_USER_STYLE:
	A widget is flagged to have a user style, once ctk_widget_set_style
	has been invoked for it. The use of this flag is to tell widgets
	which share a global user style from the ones which got a certain
	style assign from outside the toolkit.
	
CTK_RESIZE_PENDING:
	First, this is only valid for CtkContainers.
	[some of the code should move to ctkcontainer.c therefore]
	Relies on CTK_WIDGET_REALIZED(widget)
	[this is not really enforced throughout the code, but should
	 be. it only requires a few checks for CTK_WIDGET_REALIZED and
	 minor changes to ctk_widget_unrealize, we can then remove the check
	 in ctk_widget_real_destroy]
	Means: there is an idle handler waiting for the container to
	resize it.

CTK_RESIZE_NEEDED:
	Relies on CTK_WIDGET_REALIZED(widget)
	[this is not really enforced throughout the code, but should
	 be. once this is done special checking in ctk_widget_real_destroy
	 can be avoided]
	Means: a widget has been added to the resize_widgets list of
	its _toplevel_ container (keep this in mind for CtkViewport).
	Remark: this flag is also used internally by ctkwindow.c during
	the evaluation of resizing worthy widgets.

CTK_LEAVE_PENDING:
	A widget is flagged as such if there is a leave_notify event
	pending for it. It will receive this event regardless of a grab
	through another widget or its current sensitivity.
	[this should be made relying on CTK_REALIZED]

CTK_HAS_SHAPE_MASK:
	Set by ctk_widget_shape_combine_mask if a widget got a shape mask
	assigned (making use of the X11 shaped window extension).

CTK_IN_REPARENT:
	During the act of reparentation widgets which are already
	realized and will be added to an already realized parent need
	to have this flag set to prevent natural unrealization on the
	process of getting unparented.

CTK_NEED_REQUEST:
	This flag is set if the widget doesn't have an up to date 
	requisition. If this flag is set, we must actually emit ::size-request
        when ctk_widget_size_request() is called. Otherwise, we can
        simply widget->requisition. We keep track of this all the time
        however, widgets with this flag set are only added to the resize 
	queue if they are viewable.

CTK_NEED_ALLOCATION:
	This flag is set if the widget doesn't have an up to date 
	allocation. If this flag is set, we must actually emit ::size-allocate
        when ctk_widget_size_allocate() is called, even if the new allocation
        is the same as the current allocation.
 
Related Macros:

CTK_WIDGET_DRAWABLE:
	This macro examines whether a widget is flagged as CTK_WIDGET_VISIBLE
	and CTK_WIDGET_MAPPED.
	Means: it _makes sense_ to draw in a widgets window.

CTK_WIDGET_IS_SENSITIVE:
	This macro tells the real sensitivity state of a widget. It returns
	whether both the widget and all its parents are in sensitive state.


II. Invariants:
---------------

This section describes various constraints on the states of 
the widget:

In the following

  A => B     means  if A is true, than B is true
  A <=> B    means  A is true, if and only if B is true
                    (equivalent to A => B and A <= B)


1)  CTK_WIDGET_DESTROYED (widget) => !CTK_WIDGET_REALIZED (widget)
                                  => !CTK_WIDGET_VISIBLE (widget)
[ The latter is not currently in place, but it should be ] 
 
2) CTK_WIDGET_MAPPED (widget) => CTK_WIDGET_REALIZED (widget)

3) if CTK_WIDGET_TOPLEVEL (widget):
   CTK_WIDGET_VISIBLE (widget) <=> CTK_WIDGET_MAPPED (widget)

4) if !CTK_WIDGET_TOPLEVEL (widget):
  widget->parent && CTK_WIDGET_REALIZED (widget->parent) <=>
     CTK_WIDGET_REALIZED (widget)

5) if !CTK_WIDGET_TOPLEVEL (widget):

   CTK_WIDGET_MAPPED (widget) => CTK_WIDGET_VISIBLE (widget)
                              => CTK_WIDGET_CHILD_VISIBLE (widget)
                              => CTK_WIDGET_REALIZED (widget)

   widget->parent && CTK_WIDGET_MAPPED (widget->parent) && 
     CTK_WIDGET_VISIBLE (widget) && CTK_WIDGET_CHILD_VISIBLE 
       <=> CTK_WIDGET_MAPPED (widget)

Note:, the definition

[  CTK_WIDGET_DRAWABLE = CTK_WIDGET_VISIBLE && CTK_WIDGET_MAPPED
   is made in ctkwidget.h, but by 3) and 5), 
     
      CTK_WIDGET_MAPPED => CTK_WIDGET_VISIBLE
]

6) CTK_REDRAW_PENDING => CTK_WIDGET_REALIZED
   CTK_RESIZE_PENDING =>         "
   CTK_LEAVE_PENDING  =>         "
   CTK_RESIZE_NEEDED  =>         "

III. How states are changed:
----------------------------

How can the user control the state of a widget:
-----------------------------------------------

(In the following, set flag means set the flag, do appropriate
actions, and enforce above invariants) 

ctk_widget_show: 
 if !CTK_DESTROYED sets CTK_VISIBLE

ctk_widget_hide:
 if !CTK_VISIBLE for widget

ctk_widget_destroy:
 sets CTK_DESTROYED
 For a top-level widget

ctk_widget_realize:
 if !CTK_DESTROYED sets CTK_REALIZED
- Calling ctk_widget_realize when the widget is not a descendant
  of a toplevel is an ERROR.

ctk_container_add (container, widget) [ and container-specific variants ]
 Sets widget->parent 

ctk_container_remove (container, widget)
 unsets widget->parent

ctk_widget_reparent (widget, new_parent)
 Equivalent to removing widget from old parent and adding it to
 the new parent, except that the widget will not be temporarily 
 unrealized if both the old parent and the new parent are realized.


ctk_widget_unrealize
ctk_widget_map
ctk_widget_unmap

These functions are not meant to be used by applications - they
are used only by CTK and widgets to enforce invariants on the
state.

When The X window corresponding to a CTK window is destroyed:
-------------------------------------------------------------

ctk_widget_destroy is called (as above).



IV. Responsibilities of widgets
--------------------------------

Adding to a container
---------------------

When a widget is added to a container, the container:

  1) calls ctk_widget_set_parent_window (widget, window) if 
     the widget is being added to something other than container->window
  2) calls ctk_widget_set_parent (widget, container)

Removing from a container
-------------------------

When a widget is removed to a container, the container:

  1) Calls ctk_widget_unparent (widget)
  2) Queues a resize.

Notes:

 ctk_widget_unparent unrealizes the widget except in the 
   special case CTK_IN_REPARENT is set.


At widget creation
------------------

Widgets are created in an unrealized state. 

 1) The widget should allocate and initialize needed data structures


The Realize signal
------------------

When a widget receives the "realize" signal it should:

 NO_WINDOW widgets: (probably OK to use default handler)

  1) set the realized flag
  2) set widget->window
      widget->window = ctk_widget_get_parent_window (widget);
      g_object_ref (widget->window);
  3) attach the widget's style

  widget->style = ctk_style_attach (widget->style, widget->window);

 widget with window(s)

  1) set the REALIZED flag
  2) create windows with the parent obtained from
      ctk_widget_get_parent_window (widget);
  3) attach the widget's style
  4) set the background color for the new window based on the style

The Map signal
--------------

  1) Set the MAPPED flag
  2) If the widget has any windows, cdk_window_show those windows
  3) call ctk_widget_map for all child widgets that are 
     VISIBLE, CHILD_VISIBLE and !MAPPED. (A widget will only
     be !CHILD_VISIBLE if the container set it that way, so
     most containers will not have to check this.)
  3) Do any other functions related to putting the widget onscreen.
     (for instance, showing extra popup windows...)

The Unmap signal
----------------

When a widget receives the unmap signal, it must:

 1) If the widget has a window, cdk_window_hide that window, 
 2) If the widget does not have a window, unmap all child widgets
 3) Do any other functions related to taking the widget offscreen
     (for instance, removing popup windows...)
 4) Unset CTK_MAPPED


The Unrealize signal
--------------------

When a widget receives the unrealize signal, it must

 1) For any windows other than widget->window do:

    cdk_window_set_user_data (window, NULL);
    cdk_window_destroy (window);

 2) Call the parent's unrealize handler


The Widget class unrealize handler will take care of unrealizing
all children if necessary. [should this be made consistent with
unmap???]


The Destroy Signal
------------------

Commentary:

  The destroy signal probably shouldn't exist at all. A widget
  should merely be unrealized and removed from its parent
  when the user calls ctk_widget_destroy or a GDK_DESTROY event
  is received. However, a large body of code depends on
  getting a definitive signal when a widget goes away.

  That could be put in the finalization step, but, especially
  with language bindings, the cleanup step may need to refer
  back to the widget. (To use ctk_widget_get_data, for instance)
  If it does so via a pointer in a closure (natural for
  Scheme, or Perl), then the finalization procedure will never
  be called. 

  Also, if we made that the finalization step, we would have
  to propagate the GDK_DESTROY event in any case, since it is
  at that point at which user-visible actions need to be taken.


When a widget receives the destroy signal, it must:

  1) If the widget "owns" any widgets other than its child
     widgets, (for instance popup windows) it should
     call ctk_widget_destroy () for them.

  2) Call the parent class's destroy handler.


The "destroy" signal will only be received once. A widget
will never receive any other signals after the destroy
signal (but see the section on "Finalize" below)

The widget must handle calls to all publically accessible
functions in an innocuous manner even after a "destroy"
signal. (A widget can assume that it will not be realized 
after a "destroy" signal is received, which may simplify
handling this requirement)


The Finalize Pseudo-signal
--------------------------

The finalize pseudo-signal is received after all references
to the widget have been removed. The finalize callback
cannot make any CTK calls with the widget as a parameter.

1) Free any memory allocated by the widget. (But _not_
   the widget structure itself.

2) Call the parent class's finalize signal


A note on chaining "destroy" signals and finalize signals:
---------------------------------------------------------

This is done by code like:

  if (CTK_OBJECT_CLASS (parent_class)->destroy)
    (* CTK_OBJECT_CLASS (parent_class)->destroy) (object);

It may not be completely obvious why this works. Note
that parent_class is a static variable on a per-class
basis. So say: we have

  CtkFoo <- CtkBar <- CtkWidget <-CtkObject

And that Foo, Widget, and Object all have destructors, but
not Bar.

Then ctk_foo_destroy will call ctk_widget_destroy (because
it was not overridden in the Bar class structure) and
ctk_widget_destroy will call ctk_object_destroy because
the parent_class variable referenced by ctk_foo_destroy is the 
static variable in ctkwidget.c: CtkObjectClass.
